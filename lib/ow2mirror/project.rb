#
# Christophe Hamerling - OW2
#
require 'pp'

module Ow2mirror
  class Project

    include FileUtils

    attr_reader :attributes

    def initialize(config, properties)
      @config = config
      @name = properties[:name]

      if @name.nil?
        fail 'Need to provide the project name' unless @name.nil?
      end

      # Used for initial creation
      @prefix = properties[:prefix]
      @repositories = properties[:repositories]
      @target_project = properties[:target]

      bootstrap unless File.directory?(folder) and File.exists?(project_file)

      load_attributes
    end

    #
    # Creates the default project folder with all the required files
    #
    def bootstrap
      puts "Creating folder for project at #{folder}"
      mkdir_p folder

      @attributes = {
          :project => @name,
          :prefix => @prefix,
          :repositories => @repositories,
          :creation_date => "#{Time.now}",
          :last_mirror => "0",
          :date => "#{Time.now}",
      }

      save
    end

    #
    # Returns the project folder path
    #
    def folder
      "#{ENV['HOME']}/#{@config.attributes['path']}/#{@name}/"
    end

    #
    # Folder for the given repository name
    #
    def repository_folder(name)
      "#{folder}#{name}.git"
    end

    #
    # Project configuration file
    #
    def project_file
      "#{folder}/project.json"
    end

    def repos_file
      "#{folder}/repos.json"
    end

    #
    #
    #
    def create_mirror

      # TODO : Check that all required data is here!

      puts ">> Mirroring stuff from #{@name} source project to #{@target_project}..."
      cd(folder)

      puts " - Working in the folder #{pwd}"

      # Get the repositories with their name and gitorious git URL
      # TODO :Make it in a generic way (load class from name)...

      source = {}
      source[:username] = @config.attributes['source']['username']
      source[:password] = @config.attributes['source']['password']
      source[:url] = @config.attributes['source']['url']
      source[:project] = @config.attributes['source']['project']
      source_client = Ow2mirror::Client::GitoriousClient.new(source)
      sources = source_client.repositories(@name)

      target = {}
      target[:username] = @config.attributes['destination']['username']
      target[:password] = @config.attributes['destination']['password']
      target[:url] = @config.attributes['destination']['url']
      target[:project] = @target_project
      target_client = Ow2mirror::Client::GithubClient.new(target)

      puts " - Retrieved the following repositories from sources"
      sources.each do |repository|
        puts "  - #{repository[:name]} @ #{repository[:giturl]}"
      end

      repos = []

      # For each repository, create the new one on the destination host
      # Todo : Filter from user choices...
      sources.each do |repository|
        cd(folder)
        puts " - Working in the folder #{pwd}"

        name = repository[:name]
        git = repository[:giturl]

        puts " - Working on repository #{name} - #{git}"
        puts " - Clone source locally into #{name}"

        Ow2mirror::Command.git("clone --bare --mirror #{git}")

        folder = repository_folder(name)

        puts " - cd to #{folder}"
        if File.directory?(repository_folder(repository)) and File.exist?(repository_folder(repository))
          # No folder means that something failed...
        end

        cd(repository_folder(name))

        target_repo = (@prefix.nil? or @prefix.empty?) ? name : "#{@prefix}-#{name}"

        puts " - Target repository is #{target_repo}"

        remote = target_client.create(@target_project, target_repo, "Official mirror of OW2 repository #{name} hosted at #{git}")
        Ow2mirror::Command.git("remote add #{@config.attributes['destination']['type']} #{remote}")

        Ow2mirror::Command.git("config remote.#{@config.attributes['destination']['type']}.mirror true")

        # cache repo
        repos << {:name => name, :source => git, :destination => remote}

      end

      puts ">>> Generated repositories"
      pp repos

      save
      save_repos repos

      mirror
    end

    #
    # Mirror all the repositories based on the mirror file generated by the create_mirror method
    #
    def mirror

      puts "- Mirroring repositories..."
      repositories.each do |repository|
        puts "Mirroring repository #{repository}..."
        mirror_repository(repository['name'])
      end
    end


    #
    # Get all the repositories of the current project
    #
    def repositories
      # TODO : merge with current data
      load_repos
    end

    #
    #
    #
    def mirror_repository(repository)
      if File.directory?(repository_folder(repository)) and File.exist?(repository_folder(repository))
        puts "> cd #{repository_folder(repository)}"
        cd(repository_folder(repository))

        Ow2mirror::Command.git("fetch --quiet origin")
        Ow2mirror::Command.git("push --quiet #{@config.attributes['destination']['type']}")
      else
        puts "#{repository} is not valid : Folder not found!"
      end
    end

    #
    # Load the attributes from the configuration file
    #
    def load_attributes
      @attributes = MultiJson.decode(File.new(project_file, 'r').read)
    end

    def required_creation_data!
      @target_project != nil and @target_project.length > 0 and @name != nil and @name.length > 0
    end

    def required_mirroring_data!
      @name != nil and @name.length > 0
    end

    #
    # Save the project information in the project folder
    #
    def save
      json = MultiJson.encode(@attributes)
      File.open(project_file, 'w') { |f| f.write(json) }
    end

    #
    # Load the repos from file
    #
    def load_repos
      MultiJson.decode(File.new(repos_file, 'r').read)
    end

    #
    # Save the repos table to file
    #
    def save_repos(repos)
      json = MultiJson.encode(repos)
      File.open(repos_file, 'w') { |f| f.write(json) }
    end

  end
end

